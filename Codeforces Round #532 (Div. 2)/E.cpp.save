#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

#define ll long long
#define pb push_back
#define sz(x) (int)(x).size()
#define mp make_pair
#define f first
#define s second
#define all(x) x.begin(), x.end()
#define D(x) cerr << #x << " is " << (x) << "\n";

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; ///find_by_order(),order_of_key()
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1,T2>& a) { os << '{' << a.f << ", " << a.s << '}'; return os; }
template<class T> ostream& operator<<(ostream& os, const vector<T>& a){os << '{';for(int i=0;i<sz(a);i++){if(i>0&&i<sz(a))os << ", ";os << a[i];}os<<'}';return os;}
template<class T> ostream& operator<<(ostream& os, const set<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const map<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
const int N=1e5+5;
vector<int> visited(N);
struct segTree{
    vector<int> minn;
    vector<pair<int,int> > edge;
    vector<pair<int,int> > lazyedge;
    vector<int> lazy;
    void init()
    {
        minn.resize(4*N,INT_MAX);
        lazy.resize(4*N,INT_MAX);
        edge.resize(4*N);
        lazyedge.resize(4*N);
    }
    void prop(int i)
    {
        if(minn[2*i]>lazy[i])
        {
            minn[2*i]=lazy[i];
            edge[2*i]=lazyedge[i];
        }
        if(lazy[2*i]>lazy[i])
        {
            lazy[2*i]=lazy[i];
            lazyedge[2*i]=lazyedge[i];
        }
        if(minn[2*i+1]>lazy[i])
        {
            minn[2*i+1]=lazy[i];
            edge[2*i+1]=lazyedge[i];
        }
        if(lazy[2*i+1]>lazy[i])
        {
            lazy[2*i+1]=lazy[i];
            lazyedge[2*i+1]=lazyedge[i];
        }
        lazy[i]=INT_MAX;
    }
    void add(int qs,int qe,int m,int u,int v,int l=0,int r=N-1,int i=1)
    {
        if(qs>r||qe<l)
            return;
        printf("%i %i %i %i")
        if(qs<=l&&qe>=r)
        {
            if(minn[i]>m)
            {
                minn[i]=m;
                edge[i]=make_pair(u,v);
            }
            if(lazy[i]>m)
            {
                lazy[i]=m;
                lazyedge[i]=make_pair(u,v);
            }
            return;
        }
        int mi=(l+r)>>1;
        prop(i);
        add(qs,qe,m,l,mi,2*i);
        add(qs,qe,m,mi+1,r,2*i+1);
    }
    void set(int pos,int l=0,int r=N-1,int i=1)
    {
        if(l>pos||r<pos)
            return;
        if(l==r&&r==pos){
            minn[i]=lazy[i]=INT_MAX;
            return;
        }
        prop(i);
        int m=(l+r)>>1;
        set(pos,l,m,2*i);
        set(pos,m+1,r,2*i+1);
    }
    pair<int,pair<int,int> > get(int pos,int l=0,int r=N-1,int i=1)
    {
        if(l>pos||r<pos)
            return make_pair(INT_MAX,edge[i]);
        if(l==r&&r==pos)
            return make_pair(minn[i],edge[i]);
        prop(i);
        int m=(l+r)>>1;
        return min(get(pos,l,m,2*i),get(pos,m+1,r,2*i+1));
    }
}st;
int res=0;
vector<int> li;
map<int,int> mapa[N];
vector<vector<pair<int,int> > > graf(N);
map<int,int> pos;
void dfs(int tr,int d)
{
    printf("%i %i\n",tr,d);
    pos[tr]=d;
    visited[tr]=1;
    for(auto p:graf[tr])
    {
        int sl=p.f;
        int dd=p.s;
        if(visited[sl]==2)
            continue;
        if(visited[sl]==0)
        {
            printf("Dodajem %i %i %i %i %i\n",0,d,dd,tr,sl);
            st.add(0,d,dd,tr,sl);
            dfs(sl,d+1);
            continue;
        }
        printf("YES! %i %i %i\n",tr,sl,dd);
        pair<int,pair<int,int> > sol=st.get(pos[sl]);
        cout << sol << endl;
        sol=min(sol,make_pair(dd,make_pair(tr,sl)));
        res=max(res,sol.f);
        li.pb({mapa[sol.s.f][sol.s.s]});
    }
    visited[tr]=2;
    st.set(d);
}
int main()
{
	int n,m;
	scanf("%i %i",&n,&m);
	st.init();
	for(int i=0;i<m;i++)
    {
        int a,b,c;
        scanf("%i %i %i",&a,&b,&c);
        a--;b--;
        mapa[a][b]=i+1;
        graf[a].pb({b,c});
    }
    for(int i=0;i<n;i++)
    {
        if(visited[i]==0)
            dfs(i,0);
    }
    printf("%i %i\n",res,li.size());
    for(auto p:li)
        printf("%i ",p);
    printf("\n");
    return 0;
}
