/*
    -Simulate the process to get the final circle.
    -We have 2 choices to do when going backwards, so it will be 2^k final circles.
    -Don't count the same circles by memor
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

#define ll long long
#define pb push_back
#define sz(x) (int)(x).size()
#define mp make_pair
#define f first
#define s second
#define all(x) x.begin(), x.end()
#define D(x) cerr << #x << " is " << (x) << "\n";

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; ///find_by_order(),order_of_key()
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1,T2>& a) { os << '{' << a.f << ", " << a.s << '}'; return os; }
template<class T> ostream& operator<<(ostream& os, const vector<T>& a){os << '{';for(int i=0;i<sz(a);i++){if(i>0&&i<sz(a))os << ", ";os << a[i];}os<<'}';return os;}
template<class T> ostream& operator<<(ostream& os, const set<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const map<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}

string napred(string s)
{
    string sol;
    for(int i=0,n=s.size();i<n;i++)
    {
        if(s[i]==s[(i+1)%n])
            sol+='B';
        else
            sol+='W';
    }
    return sol;
}
map<string,int> ima;
int sol;
void genall(string s,int k)
{
    if(k==0)
    {
        if(ima[s])
            return;
        for(int i=0,n=s.size();i<n;i++)
        {
            string tr;
            for(int j=0;j<n;j++)
                tr+=s[(i+j)%n];
            ima[tr]=1;
        }
        sol++;
        return;
    }
    int cnt=0;
    for(auto p:s)
        if(p=='W')
            cnt++;
    if(cnt%2)
        return;
    string t1="W",t2="B";
    for(int i=0,n=s.size();i<n-1;i++)
    {
        if(s[i]=='W')
        {
            if(t1.back()=='W')
                t1+='B',t2+='W';
            else
                t1+='W',t2+='B';
        }
        else
            t1+=t1.back(),t2+=t2.back();
    }
    genall(t1,k-1);
    genall(t2,k-1);
}
int main()
{
	int n,k;
	scanf("%i %i",&n,&k);
	string s;
	cin >> s;
	for(int i=0;i<k;i++)
        s=napred(s);
    genall(s,k);
    printf("%i\n",sol);
    return 0;
}
