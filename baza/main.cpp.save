
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define ll long long
#define pb push_back
#define sz(x) (int)(x).size()
#define mp make_pair
#define f first
#define s second
#define all(x) x.begin(), x.end()
#define D(x) cerr << #x << " is " << (x) << "\n";

using namespace std;
using namespace __gnu_pbds;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; ///find_by_order(),order_of_key()
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1,T2>& a) { os << '{' << a.f << ", " << a.s << '}'; return os; }
template<class T> ostream& operator<<(ostream& os, const vector<T>& a){os << '{';for(int i=0;i<sz(a);i++){if(i>0&&i<sz(a))os << ", ";os << a[i];}os<<'}';return os;}
template<class T> ostream& operator<<(ostream& os, const set<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const map<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}

int n;
vector<pair<short,vector<pair<char,int> > > > Trie;
vector<pair<char,int> > empt;
int cnt=0;
int newNode()
{
    Trie.pb({-1,empt});
    cnt++;
    return Trie.size()-1;
}
int root;
void construct(char *s,char pos,int tr=root)
{
    if(s[pos]==0)
        return;
    int koji=-1;
    for(auto p:Trie[tr].s)
        if(p.f==s[pos])
            koji=p.s;
    if(koji==-1){
        int a=newNode();
        Trie[tr].s.pb({s[pos],a});
        koji=a;
    }
    construct(s,pos+1,koji);
}
void add(char* s,char pos,int ind,int tr=root)
{
    if(s[pos]==0)
    {
        if(Trie[tr].f==-1)
            Trie[tr].f=ind;
        return;
    }
    int koji=-1;
    for(auto p:Trie[tr].s)
        if(p.f==s[pos])
            koji=p.s;
    if(koji==-1){
        return;
    }
    add(s,pos+1,ind,koji);
}
void inc(char* s,char pos,int tr=root)
{
    Trie[tr].f++;
    if(s[pos]==0)
        return;
    int koji=-1;
    for(auto p:Trie[tr].s)
        if(p.f==s[pos])
            koji=p.s;
    if(koji==-1)
        return;
    inc(s,pos+1,koji);
}
int getkraj(char* s,char pos,int tr=root)
{
    if(s[pos]==0)
    {
        if(Trie[tr].f!=-1)
            return Trie[tr].f;
        return n;
    }
    int koji=-1;
    for(auto p:Trie[tr].s)
        if(p.f==s[pos])
            koji=p.s;
    if(koji==-1)
        return n;
    return getkraj(s,pos+1,koji);
}
int getcnt(char* s,char pos,int tr=root)
{
    int sol=Trie[tr].f;
    if(s[pos]==0)
        return sol;
    int koji=-1;
    for(auto p:Trie[tr].s)
        if(p.f==s[pos])
            koji=p.s;
    if(koji==-1)
        return sol;
    return sol+getcnt(s,pos+1,koji);
}
const int mod=1e9+9;
int main()
{
    root=newNode();
    //freopen("baza.in.10","r",stdin);
	scanf("%i",&n);
	char niz[n][30];
	for(int i=0;i<n;i++)
        scanf("%s",niz[i]);
    vector<int> h;
    for(int i=0;i<n;i++)
    {
        int hh=0;
        for(int j=0;j<30;j++)
        {
            if(niz[i][j]==0)
                break;
            hh=(ll)hh*29%mod;
            hh+=niz[i][j]-'a'+1;
            if(hh>=mod)
                hh-=mod;
            h.pb(hh);
        }
    }
    sort(all(h));
    int q;
    scanf("%i",&q);
    char qq[q][30];
    for(int i=0;i<q;i++)
        scanf("%s",qq[i]);
    char aa[q][30];
    for(int i=0;i<q;i++)
    {
        int hh=0;
        int last=0;
        for(int j=0;j<30;j++)
        {
            if(qq[i][j]==0)
                break;
            hh=(ll)hh*29%mod;
            hh+=qq[i][j]-'a'+1;
            if(hh>=mod)
                hh-=mod;
            int l=0,r=h.size()-1;
            while(l<r)
            {
                int m=(l+r)>>1;
                if(h[m]<hh)
                    l=m+1;
                else
                    r=m;
            }
            if(h[l]==hh)
                last=j+1;
        }
        for(int j=0;j<last;j++)
            aa[i][j]=qq[i][j];
        aa[i][last]=0;
    }
    h.clear();
    for(int i=0;i<q;i++)
        construct(aa[i],0);
    for(int i=0;i<n;i++)
        add(niz[i],0,i);
    vector<pair<pair<short,short>,char*> > qu(q);
    int ans[q];
    for(int i=0;i<q;i++)
    {
        qu[i].s=qq[i];
        qu[i].f.s=i;
        qu[i].f.f=getkraj(qq[i],0);;
    }
    for(auto &p:Trie)
        p.f=0;
    sort(all(qu));
    int tr=0;
    for(auto p:qu)
    {
        while(p.f.f>=tr&&tr<n)
        {
            inc(niz[tr],0);
            tr++;
        }
        ans[p.f.s]=getcnt(p.s,0);
    }
    for(int i=0;i<q;i++)
        printf("%i\n",ans[i]);
    return 0;
}
