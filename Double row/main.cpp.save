/*
    -Make a graph with 2*n nodes and connect the ones that need to be on different sides (two of the same number/opposite fields).
    -Also for every node memorize in which row it started.
    -Now for every connected component, we have 2 options on in which row to put what node, choose the one that requires less operations (has less elements out of place)
    -The final answer is the 
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define ll long long
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()

using namespace std;
using namespace __gnu_pbds;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; ///find_by_order(),order_of_key()
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1,T2>& a) { os << '{' << a.f << ", " << a.s << '}'; return os; }
template<class T> ostream& operator<<(ostream& os, const vector<T>& a){os << '{';for(int i=0;i<sz(a);i++){if(i>0&&i<sz(a))os << ", ";os << a[i];}os<<'}';return os;}
template<class T> ostream& operator<<(ostream& os, const set<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const map<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const gp_hash_table<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}

const int N=1e5+5;
vector<vector<int> > graf(N),visited(N,vector<int>(2));
vector<int> last(N,-1),a(N),b(N),o(N);
int calc(int tr,int x){
    visited[tr][x]=1;
    int ans=o[tr]!=x;
    for(auto p:graf[tr])
        if(!visited[p][x^1])
            ans+=calc(p,x^1);
    return ans;
}
int main()
{
	int n;
	scanf("%i",&n);
	for(int i=0;i<n;i++)
        scanf("%i",&a[i]);
    for(int i=0;i<n;i++)
        scanf("%i",&b[i]);
    for(int i=0;i<n;i++)
    {
        if(~last[a[i]])
            graf[last[a[i]]].pb(2*i),graf[2*i].pb(last[a[i]]);
        o[2*i]=0;
        last[a[i]]=2*i;
        if(~last[b[i]])
            graf[last[b[i]]].pb(2*i+1),graf[2*i+1].pb(last[b[i]]);
        o[2*i+1]=1;
        last[b[i]]=2*i+1;
        graf[2*i].pb(2*i+1),graf[2*i+1].pb(2*i);
    }
    int ans=0;
    for(int i=0;i<2*n;i++)
        if(!visited[i][0])
            ans+=min(calc(i,0),calc(i,1));
    printf("%i\n",ans/2);
    return 0;
}
