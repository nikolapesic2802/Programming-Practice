#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

#define ll long long
#define pb push_back
#define sz(x) (int)(x).size()
#define mp make_pair
#define f first
#define s second
#define all(x) x.begin(), x.end()
#define D(x) cerr << #x << " is " << (x) << "\n";

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; ///find_by_order(),order_of_key()
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1,T2>& a) { os << '{' << a.f << ", " << a.s << '}'; return os; }
template<class T> ostream& operator<<(ostream& os, const vector<T>& a){os << '{';for(int i=0;i<sz(a);i++){if(i>0&&i<sz(a))os << ", ";os << a[i];}os<<'}';return os;}
template<class T> ostream& operator<<(ostream& os, const set<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const map<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
bool test(string s,string s2)
{
    string ee=s2;
    reverse(all(ee));
    if(ee==s2&&s2!=s)
    {
        return true;
    }
    return false;
}
int main()
{
    while(true)
    {
        string s;
        int n=rng()%10;
        for(int i=0;i<n;i++)
            s+=rng()%26+'a';
        string t=s;
        reverse(all(t));
        if(rng()%2)
        {
            char c=rng()%26+'a';
            s=s+'c'+t;
        }
        else
            s=s+t;
        n=s.size();
        bool test=true;
        for(int i=0;i<n-1;i++)
        {
            if(s[i]!=s[i+1])
                test=false;
        }
        if(test)
        {
            continue;
        }
        bool test=false;
        for(int i=0;i<n-1;i++)
        {
            string ne=s.substr(i+1,n-i-1)+s.substr(0,i+1);
            string ee=ne;
            reverse(all(ee));
            if(ee==ne&&ne!=s)
            {
                test=true;
                break;
            }
        }
        if(!test)
        {
            test=false;
            for(int i=0;i<n-1;i++)
            {
                for(int j=i+1;j<n-1;j++)
                {
                    string s1=s.substr(0,i+1);
                    string s2=s.substr(i+1,j-i+1);
                    string s3=s.substr(j+1,n-j-1);
                    if(test(s,s1+s2+s3))
                    {
                        test=true;
                    }
                    if(test(s,s1+s3+s2))
                    {
                        test=true;
                    }
                    if(test(s,s2+s1+s3))
                    {
                        test=true;
                    }
                    if(test(s,s1+s2+s3))
                    {
                        test=true;
                    }
                }
            }
        }
    }
    return 0;
}
