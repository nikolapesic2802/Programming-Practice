#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

#define ll long long
#define pb push_back
#define sz(x) (int)(x).size()
#define mp make_pair
#define f first
#define s second
#define all(x) x.begin(), x.end()
#define D(x) cerr << #x << " is " << (x) << "\n";

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; ///find_by_order(),order_of_key()
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1,T2>& a) { os << '{' << a.f << ", " << a.s << '}'; return os; }
template<class T> ostream& operator<<(ostream& os, const vector<T>& a){os << '{';for(int i=0;i<sz(a);i++){if(i>0&&i<sz(a))os << ", ";os << a[i];}os<<'}';return os;}
template<class T> ostream& operator<<(ostream& os, const set<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const map<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}

int cnt=0;
ll a,b;
ll lim=1e9+1;
vector<int> primes={2,3,5,7};
vector<int> nums;
void gen(int in,int br)
{
    if(in==4)
    {
        nums.pb(br);
        return;
    }
    while(true)
    {
        gen(in+1,br);
        if(lim/primes[in]<br)
            break;
        br*=primes[in];
    }
}
ll alim,blim;
ll dp[19][5200];
gp_hash_table<int,int> convert;
ll rec(ll prefix,int n,int prod)
{
    ll minn=prefix,maxx=prefix;
    for(int i=0;i<n;i++)
        minn=minn*10,maxx=maxx*10+9;
    if(minn>blim||maxx<alim)
        return 0;
    if(minn>=alim&&maxx<=blim)
    {
        if(dp[n][convert[prod]]!=-1)
            return dp[n][convert[prod]];
        if(n==0)
        {
            if(prod==1)
                return 1;
            return 0;
        }
        ll cnt=0;
        for(int k=1;k<=9;k++)
            if(prod%k==0)
                cnt+=rec(prefix*10+k,n-1,prod/k);
        return dp[n][convert[prod]]=cnt;
    }
    if(n==0)
    {
        if(prod==1)
            return 1;
        return 0;
    }
    ll cnt=0;
    for(int k=1;k<=9;k++)
        if(prod%k==0)
            cnt+=rec(prefix*10+k,n-1,prod/k);
    return cnt;
}
int main()
{
    memset(dp,-1,sizeof(dp));
    gen(0,1);
	scanf("%lld %lld",&a,&b);
	ll sol=0;
	for(int i=0;i<(int)nums.size();i++)
        convert[nums[i]]=i;
	for(auto p:nums){
        alim=a/p;
        blim=b/p;
        if(a%p)
            alim++;
        for(int i=1;i<=18;i++)
            sol+=rec(0,i,p);
	}
    printf("%lld\n",sol);
    return 0;
}
