/*
    -Because the height will always only increase, we can use a 2d segment tree to handle the updates.
    -We need to handle operations get max on a submatrix and set all the values in a submatrix to something bigger.
    -We can keep two trees in the second dimention, one for updates that apply to the whole segment and one for the updates that apply to some part of the segment.
    -Now when we perform updates, we update the tree that stores updates that apply to some segment of the current interval to every node we visit and update the tree that stores updates that apply to the whole segment in the end nodes.
    -For finding the maximum, in the end nodes, we call for values that apply to and element in the segment and in 
*/
#include <bits/stdc++.h>

using namespace std;

const int N=1001,M=2048;
struct segTree{
    vector<int> lazy,mx;
    segTree(){lazy.resize(M),mx.resize(M);}
    void prop(int i){
        mx[2*i]=max(mx[2*i],lazy[i]);
        mx[2*i+1]=max(mx[2*i+1],lazy[i]);
        lazy[2*i]=max(lazy[2*i],lazy[i]);
        lazy[2*i+1]=max(lazy[2*i+1],lazy[i]);
        lazy[i]=0;
    }
    void sett(int qs,int qe,int x,int l=0,int r=N-1,int i=1){
        if(qs>r||qe<l)
            return;
        if(qs<=l&&qe>=r){
            mx[i]=max(mx[i],x);
            lazy[i]=max(lazy[i],x);
            return;
        }
        prop(i);
        int m=(l+r)>>1;
        sett(qs,qe,x,l,m,2*i);
        sett(qs,qe,x,m+1,r,2*i+1);
        mx[i]=max(mx[2*i],mx[2*i+1]);
    }
    int gett(int qs,int qe,int l=0,int r=N-1,int i=1){
        if(qs>r||qe<l)
            return 0;
        if(qs<=l&&qe>=r)
            return mx[i];
        prop(i);
        int m=(l+r)>>1;
        return max(gett(qs,qe,l,m,2*i),gett(qs,qe,m+1,r,2*i+1));
    }
};
struct seg2d{
    vector<segTree> mx,svi;
    seg2d(){mx.resize(M);svi.resize(M);}
    void sett(int qs,int qe,int a,int b,int x,int l=0,int r=N-1,int i=1){
        if(qs>r||qe<l)
            return;
        if(qs<=l&&qe>=r){
            mx[i].sett(a,b,x);
            svi[i].sett(a,b,x);
            return;
        }
        int m=(l+r)>>1;
        sett(qs,qe,a,b,x,l,m,2*i);
        sett(qs,qe,a,b,x,m+1,r,2*i+1);
        mx[i].sett(a,b,x);
    }
    int gett(int qs,int qe,int a,int b,int l=0,int r=N-1,int i=1){
        if(qs>r||qe<l)
            return 0;
        if(qs<=l&&qe>=r)
            return mx[i].gett(a,b);
        int m=(l+r)>>1;
        return max({gett(qs,qe,a,b,l,m,2*i),gett(qs,qe,a,b,m+1,r,2*i+1),svi[i].gett(a,b)});
    }
}drvo;
int main()
{
	int D,S,n,d,s,w,x,y;
	scanf("%i %i %i",&D,&S,&n);
	for(int i=0;i<n;i++)
        scanf("%i %i %i %i %i",&d,&s,&w,&x,&y),drvo.sett(x,x+d-1,y,y+s-1,drvo.gett(x,x+d-1,y,y+s-1)+w);
	printf("%i\n",drvo.gett(0,D-1,0,S-1));
    return 0;
}
