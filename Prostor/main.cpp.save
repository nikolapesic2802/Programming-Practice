#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

#define ll long long
#define pb push_back
#define sz(x) (int)(x).size()
#define mp make_pair
#define f first
#define s second
#define all(x) x.begin(), x.end()
#define D(x) cerr << #x << " is " << (x) << "\n";

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; ///find_by_order(),order_of_key()
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1,T2>& a) { os << '{' << a.f << ", " << a.s << '}'; return os; }
template<class T> ostream& operator<<(ostream& os, const vector<T>& a){os << '{';for(int i=0;i<sz(a);i++){if(i>0&&i<sz(a))os << ", ";os << a[i];}os<<'}';return os;}
template<class T> ostream& operator<<(ostream& os, const set<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const map<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}

const int N=1000;
struct fenwick{
    vector<int> sum,neg;
    fenwick(){sum.resize(N);neg.resize(N);}
    void add(int pos,int x)
    {
        for(int i=pos;i<N;i+=i&(-i))
            sum[i]+=x;
    }
    void addneg(int pos,int x)
    {
        for(int i=pos;i<N;i+=i&(-i))
            neg[i]+=x;
    }
    void update(int l,int r,int x)
    {
        add(l,x);
        add(r+1,-x);
        addneg(r+1,x);
    }
    int get(int pos)
    {
        int ans=0;
        for(int i=pos;i;i-=i&(-i))
            ans+=sum[i];
        return ans;
    }
    int getneg(int pos)
    {
        int ans=0;
        for(int i=pos;i;i-=i&(-i))
            ans+=neg[i];
        return ans;
    }
    int get(int l,int r)
    {
        return get(r)+getneg(r)-getneg(l);
    }
};
struct fenwick2D{
    vector<fenwick> sum,neg;
    fenwick2D(){sum.resize(N);neg.resize(N);}
    void add(int pos,int x,int l,int r)
    {
        for(int i=pos;i<N;i+=i&(-i))
            sum[i].update(l,r,x);
    }
    void addneg(int pos,int x,int l,int r)
    {
        for(int i=pos;i<N;i+=i&(-i))
            neg[i].update(l,r,x);
    }
    void update(int l1,int r1,int l2,int r2,int x)
    {
        add(l1,x,l2,r2);
        add(r1+1,-x,l2,r2);
        addneg(r1+1,x,l2,r2);
    }
    int get(int pos,int l,int r)
    {
        int ans=0;
        for(int i=pos;i;i-=i&(-i))
            ans+=sum[i].get(l,r);
        return ans;
    }
    int getneg(int pos,int l,int r)
    {
        int ans=0;
        for(int i=pos;i;i-=i&(-i))
            ans+=neg[i].get(l,r);
        return ans;
    }
    int get(int l1,int r1,int l2,int r2)
    {
        return get(r1,l2,r2)+getneg(r1,l2,r2)-getneg(l1,l2,r2);
    }
};
struct query{
    int x1y1,y2,z1,z2,
};
int main()
{
    int n;
    scanf("%i",&n);
    fenwick2D a;
    vector<
    return 0;
}
