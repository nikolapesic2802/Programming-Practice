#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

#define ll long long
#define pb push_back
#define sz(x) (int)(x).size()
#define mp make_pair
#define f first
#define s second
#define all(x) x.begin(), x.end()
#define D(x) cerr << #x << " is " << (x) << "\n";

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; ///find_by_order(),order_of_key()
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1,T2>& a) { os << '{' << a.f << ", " << a.s << '}'; return os; }
template<class T> ostream& operator<<(ostream& os, const vector<T>& a){os << '{';for(int i=0;i<sz(a);i++){if(i>0&&i<sz(a))os << ", ";os << a[i];}os<<'}';return os;}
template<class T> ostream& operator<<(ostream& os, const set<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const map<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}

//3:00
int m;
struct segTree
{
    vector<pair<int,int> > maxx;
    void init()
    {
        maxx.resize(4*m,{-1,-1});
    }
    void set(int pos,pair<int,int> sta,int l=0,int r=m-1,int i=1)
    {
        if(pos<l||pos>r)
            return;
        if(l==pos&&r==pos)
        {
            maxx[i]=sta;
            return;
        }
        int mi=(l+r)>>1;
        set(pos,sta,l,mi,2*i);
        set(pos,sta,mi+1,r,2*i+1);
        maxx[i]=max(maxx[2*i],maxx[2*i+1]);
    }
    int find(int qs,int x,int l=0,int r=m-1,int i=1)
    {
        if(qs>r||maxx[i].f<x)
            return -1;
        if(l==r)
            return maxx[i].s;
        int mi=(l+r)>>1;
        int tr=find(qs,x,l,mi,2*i);
        if(tr!=-1)
            return tr;
        return find(qs,x,mi+1,r,2*i+1);
    }
}st;
int main()
{
	int n;
	scanf("%i",&n);
	vector<pair<int,int> > q(n);
	vector<pair<int,int> > points,p2;
	for(int i=0;i<n;i++)
    {
        char s[2];
        scanf("%s",s);
        if(s[0]=='D')
        {
            int a,b;
            scanf("%i %i",&a,&b);
            q[i]={b,a};
            points.pb({b,a});
        }
        else
        {
            int a;
            scanf("%i",&a);
            a--;
            q[i]={a,-1};
        }
    }
    sort(all(points));
    m=points.size();
    map<pair<int,int>,int> mapa;
    for(int i=0;i<m;i++)
        mapa[points[i]]=i;
    for(int i=0;i<n;i++)
        if(q[i].s!=-1)
            q[i].f=mapa[q[i]],p2.pb(q[i]);
    st.init();
    int tr=1;
    for(int i=0;i<n;i++)
    {
        if(q[i].s!=-1)
        {
            st.set(q[i].f,{q[i].s,tr++});
        }
        else
        {
            int tr=st.find(p2[q[i].f].f+1,p2[q[i].f].s);
            if(tr==-1)
                printf("NE\n");
            else
                printf("%i\n",tr);
        }
    }
    return 0;
}
