#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

#define ll long long
#define pb push_back
#define sz(x) (int)(x).size()
#define mp make_pair
#define f first
#define s second
#define all(x) x.begin(), x.end()
#define D(x) cerr << #x << " is " << (x) << "\n";

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; ///find_by_order(),order_of_key()
template<class T1, class T2> ostream& operator<<(ostream& os, const pair<T1,T2>& a) { os << '{' << a.f << ", " << a.s << '}'; return os; }
template<class T> ostream& operator<<(ostream& os, const vector<T>& a){os << '{';for(int i=0;i<sz(a);i++){if(i>0&&i<sz(a))os << ", ";os << a[i];}os<<'}';return os;}
template<class T> ostream& operator<<(ostream& os, const set<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T> ostream& operator<<(ostream& os, const multiset<T>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}
template<class T1,class T2> ostream& operator<<(ostream& os, const map<T1,T2>& a) {os << '{';int i=0;for(auto p:a){if(i>0&&i<sz(a))os << ", ";os << p;i++;}os << '}';return os;}

const int N=5,M=1e9;
vector<int> maxx(4*N),lazy(4*N),stk(N);
void prop(int i)
{
    maxx[2*i]+=lazy[i];
    maxx[2*i+1]+=lazy[i];
    lazy[2*i]+=lazy[i];
    lazy[2*i+1]+=lazy[i];
    lazy[i]=0;
}
void add(int qs,int qe,int l=0,int r=N-1,int i=1)
{
    if(qs>r||qe<l)
        return;
    if(qs<=l&&qe>=r)
    {
        lazy[i]++;
        maxx[i]++;
        return;
    }
    prop(i);
    int m=(l+r)>>1;
    add(qs,qe,l,m,2*i);
    add(qs,qe,m+1,r,2*i+1);
    maxx[i]=max(maxx[2*i],maxx[2*i+1]);
}
int get(int qs,int qe,int l=0,int r=N-1,int i=1)
{
    if(qs>r||qe<l)
        return 0;
    if(qs<=l&&qe>=r)
        return maxx[i];
    prop(i);
    int m=(l+r)>>1;
    return max(get(qs,qe,l,m,2*i),get(qs,qe,m+1,r,2*i+1));
}
ll get(vector<int> a)
{
    fill(all(lazy),0);
    fill(all(maxx),0);
	int n=a.size();
	reverse(all(a));
	vector<int> vals;
	for(int i=0;i<n;i++)
        vals.pb(a[i]);
    sort(all(vals));
    vals.erase(unique(all(vals)),vals.end());
    int m=vals.size(),M=vals.size();
    map<int,int> mapa;
    for(int i=0;i<m;i++)
        mapa[vals[i]]=i;
    int sol=0;
    int l=0,r=0;
    fill(all(lazy),0);
    fill(all(maxx),0);
    ll inv=0;
    reverse(all(a));
    for(auto p:a)
        inv+=get(p),add(0,p-1);
    printf("%lld %i\n",inv,sol);
    if(inv==0)
        return 1;
    else
        return inv-2*sol-1;
}
ll brute(vector<int> a)
{
    int n=a.size();
    if(n==1)
        return 0;
    ll sol=LLONG_MAX;
    for(int i=0;i<n;i++)
        for(int j=i+1;j<n;j++)
        {
            swap(a[i],a[j]);
            fill(all(lazy),0);
            fill(all(maxx),0);
            ll inv=0;
            for(auto p:a)
                inv+=get(p,p),add(0,p-1);
            sol=min(sol,inv);
            swap(a[i],a[j]);
        }
    return sol;
}
int main()
{
    freopen("in.txt","r",stdin);
    int n;
    scanf("%i",&n);
    vector<int> a(n);
    for(int i=0;i<n;i++)
        scanf("%i",&a[i]);
    cout << get(a) << endl;
    /*while(true){
        int n=(rng()%(N-2))+2;
        vector<int> a(n);
        for(int i=0;i<n;i++)
            a[i]=(rng()%M)+1;
        vector<int> vals;
        for(int i=0;i<n;i++)
            vals.pb(a[i]);
        sort(all(vals));
        vals.erase(unique(all(vals)),vals.end());
        int m=vals.size();
        map<int,int> mapa;
        for(int i=0;i<m;i++)
            mapa[vals[i]]=i;
        for(auto &p:a)
            p=mapa[p];
        if(get(a)!=brute(a))
        {
            cout << a << get(a) << "  " << brute(a);
            break;
        }
    }*/
}
